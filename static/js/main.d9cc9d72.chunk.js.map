{"version":3,"sources":["components/SearchBox.js","components/Song.js","components/TableOfSongs.js","components/Scroll.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","onSearchChange","onButtonSubmit","className","type","placeholder","onChange","onClick","id","value","disabled","selected","hidden","Song","artist","title","tabs","avaibleTabs","join","split","toLowerCase","TableOfSongs","songs","tab","cellspacing","map","song","i","tabTypes","includes","name","Scroll","props","style","overflowY","height","children","App","event","setState","pattern","target","element","document","getElementById","fetch","state","method","then","response","json","listOfSongs","catch","err","console","log","typeOfTab","options","selectedIndex","this","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2OAwBeA,G,MAjBG,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,eAAgBC,EAAqB,EAArBA,eACjC,OACI,yBAAKC,UAAU,OACX,2BAAOA,UAAU,kCAAkCC,KAAK,OAAOC,YAAY,iCAAiCC,SAAUL,IACtH,4BAAQE,UAAU,yCAAyCI,QAASL,GAApE,UACA,6BACA,4BAAQC,UAAU,MAAMK,GAAG,QACvB,4BAAQC,MAAM,GAAGC,UAAQ,EAACC,UAAQ,EAACC,QAAM,GAAzC,qBACA,4BAAQH,MAAM,UAAd,UACA,4BAAQA,MAAM,mBAAd,UACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,iBAAd,YCGDI,EAZF,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,MAChBC,EADyC,EAAlBC,YACJC,KAAK,OAAOC,MAAM,KAAKD,KAAK,KAAKE,cAAcD,MAAM,OAE5E,OACI,4BACE,wBAAIhB,UAAU,0BAA0BW,GACxC,wBAAIX,UAAU,0BAA0BY,GACxC,wBAAIZ,UAAU,0BAA0Ba,KC4BnCK,EAnCM,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC3B,OACI,yBAAKpB,UAAU,OACX,yBAAKA,UAAU,iBACX,2BAAOA,UAAU,sBAAsBqB,YAAY,KAC/C,+BACI,4BACI,wBAAIrB,UAAU,8BAAd,UACA,wBAAIA,UAAU,8BAAd,SACA,wBAAIA,UAAU,8BAAd,kBAIJmB,EAAMG,KAAI,SAACC,EAAMC,GACb,GAAIL,EAAMK,GAAGC,SAASC,SAASN,GAC3B,OACI,2BAAOpB,UAAU,WACb,kBAAC,EAAD,CACIW,OAAQQ,EAAMK,GAAGb,OAAOgB,KACxBf,MAAOO,EAAMK,GAAGZ,MAChBE,YAAaK,EAAMK,GAAGC,YAKlCD,WCpBjBI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,UACtCH,EAAMI,WC8CJC,E,YAhDb,aAAe,IAAD,8BACZ,+CAWJpC,eAAiB,SAACqC,GAChB,EAAKC,SAAS,CAAEC,QAASF,EAAMG,OAAOhC,SAbxB,EAoBhBP,eAAiB,WAEf,IAAMwC,EAAUC,SAASC,eAAe,QACxCC,MAAM,qDAAD,OAAsD,EAAKC,MAAMN,SAAW,CAC/EO,OAAQ,QAEPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA1B,GAAK,OAAI,EAAKiB,SAAS,CAAEY,YAAa7B,OAC3C8B,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAC1B,EAAKd,SAAS,CAAEiB,UAAWd,EAAQe,QAAQf,EAAQgB,eAAejD,SA3BlE,EAAKqC,MAAQ,CACXN,QAAS,GACTgB,UAAW,GACXL,YAAa,IALH,E,sEAgCJ,IAAD,EAC4BQ,KAAKb,MAAhCK,EADD,EACCA,YAAaK,EADd,EACcA,UACrB,OACE,yBAAKrD,UAAU,MACb,kBAAC,EAAD,CAAWF,eAAgB0D,KAAK1D,eAAgBC,eAAgByD,KAAKzD,iBAC5C,IAAtBiD,EAAYS,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,CAActC,MAAO6B,EAAa5B,IAAKiC,KAEvC,mC,GA1CMK,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASzB,SAASC,eAAe,SD4H3C,kBAAmByB,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.d9cc9d72.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n * Component with the input for artist's name/song title, search button and select box with the tab types.\n * @param {function} onSearchChange\n * @param {function} onButtonSubmit \n */\nconst SearchBox = ({ onSearchChange, onButtonSubmit }) => {\n    return (\n        <div className='pa2'>\n            <input className='pa3 ba b--gray bg-lightest-gray' type='text' placeholder='Type a song title or an artist' onChange={onSearchChange}/>\n            <button className=\"pa3 grow b--gray link bg-lightest-gray\" onClick={onButtonSubmit}>Search</button>\n            <br/>\n            <select className=\"mt1\" id=\"tabs\">\n                <option value=\"\" disabled selected hidden>Choose a tab type</option>\n                <option value=\"PLAYER\">Player</option>\n                <option value=\"TEXT_GUITAR_TAB\">Guitar</option>\n                <option value=\"CHORDS\">Chords</option>\n                <option value=\"TEXT_BASS_TAB\">Bass</option>\n            </select>\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\n/**\n * Renders body of the TableOfSongs component. Each row is a new song.\n * @param {string} artist - Artists name\n * @param {string} title - Title of a song\n * @param {array} avaibleTabs - an array of avaible tabs\n * @return {object} Song component\n */\nconst Song = ({ artist, title, avaibleTabs }) => {\n    let tabs = avaibleTabs.join(' | ').split('_').join(' ').toLowerCase().split(\"tab\");\n\n    return (\n        <tr>\n          <td className=\"pv3 pr3 bb b--black-20\">{artist}</td>\n          <td className=\"pv3 pr3 bb b--black-20\">{title}</td>\n          <td className=\"pv3 pr3 bb b--black-20\">{tabs}</td>\n        </tr>\n    );\n}\n\nexport default Song;","import React from 'react';\nimport Song from './Song';\n\n/**\n * Renders table of songs head and rows of <Song/> component.\n * @param {array} songs - List of songs provided from songsterr.com\n * @param {string}  tab - A tab type chosen by the user\n * @return TableOfSongs component\n */\nconst TableOfSongs = ({ songs, tab }) => {\n    return (\n        <div className=\"pa4\">\n            <div className=\"overflow-auto\">\n                <table className=\"f6 w-100 mw8 center\" cellspacing=\"0\">\n                    <thead>\n                        <tr>\n                            <th className=\"fw6 bb b--black-20 pb3 pr3\">Artist</th>\n                            <th className=\"fw6 bb b--black-20 pb3 pr3\">Title</th>\n                            <th className=\"fw6 bb b--black-20 pb3 pr3\">Avaible tabs</th>\n                        </tr>\n                    </thead>\n                    {\n                        songs.map((song, i) => {\n                            if (songs[i].tabTypes.includes(tab)) {\n                                return (\n                                    <tbody className=\"lh-copy\">\n                                        <Song\n                                            artist={songs[i].artist.name}\n                                            title={songs[i].title}\n                                            avaibleTabs={songs[i].tabTypes}\n                                        />\n                                    </tbody>\n                                );\n                            } else {\n                                i++;\n                            }\n                        })\n                    }\n                </table>\n            </div>\n        </div>\n    );\n}\n\nexport default TableOfSongs;","import React from 'react';\n\n/**\n * Allows scrolling of TableOfSongs component.\n * @param {*} props - Elements for scrolling\n */\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: 'scroll', height: '700px' }}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, {Component}from 'react';\nimport './App.css';\nimport SearchBox from './components/SearchBox';\nimport TableOfSongs from './components/TableOfSongs';\nimport Scroll from './components/Scroll';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      pattern: '',\n      typeOfTab: '',\n      listOfSongs: []\n    }\n  }\n\n  /**\n   * Keeps track of changes made by the user in the input field.\n   */\nonSearchChange = (event) => {\n  this.setState({ pattern: event.target.value });\n}\n\n/**\n * When the user clicks the 'Search' button, this function fetches a .json object with the list of songs and properties. It also sets\n * state for the tab type that the user has chosen.\n */\nonButtonSubmit = () => {\n  //https://cors-anywhere.herokuapp.com/\n  const element = document.getElementById(\"tabs\");\n  fetch(`https://www.songsterr.com/a/ra/songs.json?pattern=${this.state.pattern}`, {\n    method: 'get'\n  })\n    .then(response => response.json())\n    .then(songs => this.setState({ listOfSongs: songs }))\n    .catch(err => console.log(err))\n    this.setState({ typeOfTab: element.options[element.selectedIndex].value});\n}\n\n  render() {\n    const { listOfSongs, typeOfTab } = this.state;\n    return (\n      <div className='tc'>\n        <SearchBox onSearchChange={this.onSearchChange} onButtonSubmit={this.onButtonSubmit}/>\n        { !listOfSongs.length == 0 ?\n          <Scroll>\n            <TableOfSongs songs={listOfSongs} tab={typeOfTab}/>\n          </Scroll>\n          : <div></div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}